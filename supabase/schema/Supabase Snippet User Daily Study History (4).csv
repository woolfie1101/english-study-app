routine_name,routine_type,return_type,routine_definition
get_categories_with_progress,FUNCTION,record,"
BEGIN
  RETURN QUERY
  SELECT
    p_user_id as user_id,
    c.id as category_id,
    c.name as category_name,
    c.slug,
    c.display_order,
    COUNT(DISTINCT s.id) as total_sessions,
    -- Only count sessions completed TODAY
    COUNT(DISTINCT CASE
      WHEN usp.status = 'completed'
        AND DATE(usp.completed_at) = CURRENT_DATE
      THEN s.id
    END) as completed_sessions,
    ROUND(
      100.0 * COUNT(DISTINCT CASE
        WHEN usp.status = 'completed'
          AND DATE(usp.completed_at) = CURRENT_DATE
        THEN s.id
      END)::numeric /
      NULLIF(COUNT(DISTINCT s.id), 0),
      2
    ) as percentage
  FROM categories c
  LEFT JOIN sessions s ON s.category_id = c.id
  LEFT JOIN user_session_progress usp ON usp.session_id = s.id
    AND usp.user_id = p_user_id
  GROUP BY c.id, c.name, c.slug, c.display_order
  ORDER BY c.display_order NULLS LAST, c.name;
END;
"
get_user_category_progress,FUNCTION,record,"
BEGIN
  RETURN QUERY
  SELECT
    COALESCE(p_user_id, auth.uid()) as user_id,
    c.id as category_id,
    c.name as category_name,
    c.display_order,
    COUNT(DISTINCT s.id) as total_sessions,
    COUNT(DISTINCT CASE WHEN usp.status = 'completed' THEN s.id END) as completed_sessions,
    ROUND(
      100.0 * COUNT(DISTINCT CASE WHEN usp.status = 'completed' THEN s.id END)::numeric /
      NULLIF(COUNT(DISTINCT s.id), 0),
      2
    ) as percentage
  FROM categories c
  LEFT JOIN sessions s ON s.category_id = c.id
  LEFT JOIN user_session_progress usp ON usp.session_id = s.id
    AND usp.user_id = COALESCE(p_user_id, auth.uid())
  GROUP BY c.id, c.name, c.display_order
  ORDER BY c.display_order NULLS LAST, c.name;
END;
"
get_user_settings,FUNCTION,record,"
BEGIN
  RETURN QUERY
  SELECT
    us.id,
    us.user_id,
    us.auto_play_audio,
    us.daily_reminder,
    us.daily_goal,
    us.dark_mode,
    us.reminder_time,
    us.created_at,
    us.updated_at
  FROM user_settings us
  WHERE us.user_id = p_user_id;
END;
"
update_updated_at_column,FUNCTION,trigger,"
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
"
update_user_settings_updated_at,FUNCTION,trigger,"
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
"